---
name: MMCQ ACTIONS
on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: clean git
        run: |
          if (Test-Path -Path '.git') {
            Remove-Item '.git' -Recurse -Force
          }
        shell: pwsh
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 12.x
      - uses: subosito/flutter-action@v1
        with:
          channel: stable
      - name: Decode keystore file
        run: |
          echo "${{ secrets.UPLOAD_KEYSTORE }}" > upload-keystore.jks.asc
          gpg -d --passphrase "${{ secrets.UPLOAD_KEYSTORE_PASSPHRASE }}" --batch upload-keystore.jks.asc > android/app/upload-keystore.jks
      - name: Decode key.properties file
        env:
          SECRETS_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}
        run: echo "${{ secrets.KEY_PROPERTIES }}" | base64 -d > android/key.properties

      - name: Decode strings.xml file
        env:
          SECRETS_PROPERTIES: ${{ secrets.STRINGS_XML }}
        run: echo "${{ secrets.STRINGS_XML }}" | base64 -d > android/app/src/main/res/values/strings.xml

      - id: flutter-build
        name: Flutter Build
        run: |
          flutter clean
          flutter pub get
          $buildCommands = 'apk'
          $isRelease = '${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' && github.event_name == 'push' }}'
          $env:GIT_REDIRECT_STDERR = '2>&1'
          $lastRelease = $(git describe --tags $(git rev-list --tags --max-count=1))
          Write-Host "lastRelease: $lastRelease"
          if (!$lastRelease) {
            $lastRelease = "1.0.0"
          }
          $lastReleaseSemVer = [System.Management.Automation.SemanticVersion]$lastRelease
          if ($isRelease -eq 'true') {
            $lastReleaseVersionString = $lastReleaseSemVer.ToString()
            Write-Host "name=last-version::$lastReleaseVersionString" >> $GITHUB_OUTPUT
            $version = [System.Management.Automation.SemanticVersion]::New($lastReleaseSemVer.Major, $lastReleaseSemVer.Minor, $lastReleaseSemVer.Patch + 1)
          } else {
            $version = [System.Management.Automation.SemanticVersion]::New($lastReleaseSemVer.Major, $lastReleaseSemVer.Minor, $lastReleaseSemVer.Patch, "preview.${{ github.event.number }}")
          }
          $versionString = $version.ToString()
          Write-Host "Building $buildCommands $versionString"
          flutter build $buildCommands --release --build-name $versionString --build-number '${{ github.run_number }}'
          Write-Host "name=version::$versionString" >> $GITHUB_OUTPUT
          if ($isRelease -eq 'true') {
            git tag "$versionString" ${{ github.head_ref }}
            git push https://$env:username:$env:CI_TOKEN@github.com/${{ github.repository }}.git "$versionString"
          }
        shell: pwsh
        env:
          CI_TOKEN: ${{ secrets.CI_TOKEN }}
          username: finn-go-nguyen
      - name: Setup firebase cli
        run: |
          npm install -g firebase-tools
          firebase --version
        shell: pwsh
      - name: Firebase App Distribution
        run: |
          $isRelease = '${{ github.ref == 'refs/heads/main' || github.ref ==
          'refs/heads/development' && github.event_name == 'push' }}'
          Write-Host "Changelog for ${{ steps.flutter-build.outputs.version }}"
          New-Item changelog.txt
          if ($isRelease -eq 'true') {
            git branch --contains '${{ steps.flutter-build.outputs.last-version }}'
            git tags --contains '${{ steps.flutter-build.outputs.last-version }}'
            git --no-pager log --pretty=format:%s '${{ steps.flutter-build.outputs.last-version }}'..'${{ steps.flutter-build.outputs.version }}' > changelog.txt
          } else {
            git --no-pager log --pretty=format:%s ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changelog.txt
          }
          firebase appdistribution:distribute 'build/app/outputs/flutter-apk/app-release.apk' --app ${{ secrets.APP_ID }} --token '${{ secrets.APP_DISTRIBUTION_TOKEN }}' --groups "android_testers" --release-notes-file changelog.txt
        shell: pwsh
  build-success:
    if: ${{ github.ref != 'refs/heads/main' || github.base_ref != 'main' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo success!